#/usr/bin/env python3
#coding:utf-8


import re
'''
\d:匹配数字
\s:匹配一个空格，或者tab等空白符
\w:匹配字母或数字
    \d\d\d可以匹配：212
.：匹配任意字符
    py.可以匹配：pyc,pyo
*：任意个字符，包括0
+：至少有一个字符
？：表示0个或者1个字符
{n}:表示n个字符
{n,m}:表示n-m个字符
    \d{3}\s+\d{3,8}
        1.\d{3}:匹配3个数字，如'101'
        2.\s匹配一个空格或者tab等空白符，\s+表示至少有一个空格
        3.\d{3,8}表示3-8个数字，如'12345'
        综合起来，就是匹配任意个空格隔开的带区号的电话号码

[]:表示范围
    [0-9a-zA-Z\_]：可以匹配一个数字、字母或者下划线
    [0-9a-zA-Z\_]+：至少由一个数字、字母、下划线组成的字符串
    [a-zA-Z\_][0-9a-zA-Z\_]*：可以匹配由字母或者下划线开头，后接任意个有数字、字母、下划线组成的字符串
    [a-zA-Z\_][0-9a-zA-Z\_]{0, 19}：限制了长度为1-20
A|B:匹配A或B
    (p|P)ython可以匹配python和Python
^:匹配行开头，^\d：必须以数字开头
$:行结尾，\d$:必须以数字结束
'''


'''
re模块：
'''
print(re.match(r'^\d{3}\-\d{3,8}$', '010-12345'))
#<_sre.SRE_Match object; span=(0, 9), match='010-12345'>
print(re.match(r'^\d{3}\-\d{3,8}$', '010 12345'))
#None


#match判断是否匹配成功，成功会返回match对象
if re.match(r'^\d{3}\-\d{3,8}$', '010-12345'):
    print('识别成功！')


#切分字符串
str = 'a b   c'.split(' ')
print(str)#['a', 'b', '', '', 'c']
#使用正则
str = re.split(r'\s+','a b   c')
print(str)#['a', 'b', 'c']
str = re.split(r'[\s,\,\;]+', 'a ,,,b   c')
print(str)#['a', 'b', 'c']


'''
分组：正则表达式可以提取子串，用()表示的就是要提取的分组
^(\d{3})-(\d{3,8})$分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码
'''
str = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
print(str)#<_sre.SRE_Match object; span=(0, 9), match='010-12345'>
print(str.group(0))#010-12345
print(str.group(1))#010
print(str.group(2))#12345
#定义了组，就可以通过match对象调用group方法提取出子串，group(0)是原始字符串


#识别时间
t = '19:09:39'
str = re.match(r'^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$', t)
print(str.group())#19:09:39
print(str.groups())#('19', '09', '39')


#贪婪匹配：正则匹配默认是贪婪匹配
str = re.match(r'^(\d+)(0*)$','1012200').groups()
print(str)#('1012200', '')
#\d+：贪婪匹配，直接把后面的0全部匹配了
str = re.match(r'^(\d+?)(0*)$','12300').groups()
print(str)#加上一个?就让\d+采用非贪婪匹配


#编译：如果一个正则表达式要用几千次，可以预编译该正则表达式，重复使用就不需要编译这个步骤了
re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
#使用
str = re_telephone.match('010-111111').groups()
print(str)#('010', '111111')
str = re_telephone.match('010-1111222').groups()
print(str)#('010', '1111222')